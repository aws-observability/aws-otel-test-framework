package software.amazon.adot.testbed;
import java.io.FileWriter;
/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import com.github.rholder.retry.RetryerBuilder;
import com.github.rholder.retry.StopStrategies;
import com.github.rholder.retry.WaitStrategies;
import net.bytebuddy.asm.Advice;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.testcontainers.containers.GenericContainer;
import org.testcontainers.containers.output.Slf4jLogConsumer;
import org.testcontainers.containers.wait.strategy.Wait;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;
import org.testcontainers.utility.MountableFile;
import software.amazon.awssdk.services.cloudwatchlogs.CloudWatchLogsClient;
import software.amazon.awssdk.services.cloudwatchlogs.model.GetLogEventsRequest;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.io.InputStream;

import java.io.FileWriter;
import java.io.IOException;
import java.time.Duration;
import java.time.Instant;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.UUID;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static org.assertj.core.api.Assertions.assertThat;

import static org.junit.jupiter.api.Assertions.*;

@Testcontainers(disabledWithoutDocker = true)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class LogsTests {
    private static final String LOCAL_CREDENTIALS = System.getProperty("adot.testbed.localcreds");
    private static final String TEST_IMAGE = System.getenv("TEST_IMAGE") != null && !System.getenv("TEST_IMAGE").isEmpty()
        ? System.getenv("TEST_IMAGE")
        : "public.ecr.aws/aws-otel-test/adot-collector-integration-test:latest";
    private final Logger collectorLogger = LoggerFactory.getLogger("collector");

    private GenericContainer<?> collector;

    LogsTests() throws Exception {
    }

    private GenericContainer<?> createAndStartCollector(String configFilePath, String logFilePath) throws IOException {
        var collector = new GenericContainer<>(TEST_IMAGE)
            .withExposedPorts(4317)
            .withCopyFileToContainer(MountableFile.forClasspathResource(configFilePath), "/etc/collector/config.yaml")
            .withLogConsumer(new Slf4jLogConsumer(collectorLogger))
            .waitingFor(Wait.forLogMessage(".*Everything is ready. Begin running and processing data.*", 1))
            .withCommand("--config", "/etc/collector/config.yaml", "--feature-gates=+adot.filelog.receiver,+adot.awscloudwatchlogs.exporter,+adot.file_storage.extension");

        //Mount the log file for the file log receiver to parse
        collector.withCopyFileToContainer(MountableFile.forClasspathResource(logFilePath), logFilePath );
        if (LOCAL_CREDENTIALS != null && !LOCAL_CREDENTIALS.isEmpty()) {
            collector.withCopyFileToContainer(MountableFile.forHostPath(LOCAL_CREDENTIALS), "/root/.aws/");
        } else {
            collector.withEnv(System.getenv());
        }

        collector.start();
        collector.waitingFor(Wait.forHealthcheck());
        return collector;
    }

    @Test
    void testSyslog() throws Exception {
        collector = createAndStartCollector("/configurations/config-rfcsyslog.yaml", "/logs/RFC5424.log");

        validateLogs("logstream-rfcsyslog" , "/logs/RFC5424.log");
        collector.stop();
    }

    @Test
    void testLog4j() throws Exception {
        collector = createAndStartCollector("/configurations/config-log4j.yaml", "/logs/log4j.log");

        validateLogs("logstream-log4j" , "/logs/log4j.log");
        collector.stop();
    }

    @Test
    void testJson() throws Exception {
        collector = createAndStartCollector("/configurations/config-json.yaml", "/logs/testingJSON.log");

        validateLogs("logstream-json" , "/logs/testingJSON.log");
        collector.stop();
    }

    void validateLogs(String logName, String logFilePath) throws Exception {
        var file = new File(logFilePath);
        var lines = new HashSet<String>();

        try (InputStream inputStream = getClass().getResourceAsStream(logFilePath);
             BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {
            String line;
            while ((line = reader.readLine()) != null) {
                lines.add(line);
            }
        } catch (IOException e) {
            throw new RuntimeException("Error reading from the file: " + logFilePath, e);
        }

        var cwClient = CloudWatchLogsClient.builder()
            .build();

        RetryerBuilder.<Void>newBuilder()
            .retryIfException()
            .retryIfRuntimeException()
            .retryIfExceptionOfType(org.opentest4j.AssertionFailedError.class)
            .withWaitStrategy(WaitStrategies.fixedWait(10, TimeUnit.SECONDS))
            .withStopStrategy(StopStrategies.stopAfterAttempt(5))
            .build()
            .call(() -> {
                var now = Instant.now();
                var start = now.minus(Duration.ofMinutes(2));
                var end = now.plus(Duration.ofMinutes(2));
                var response = cwClient.getLogEvents(GetLogEventsRequest.builder().logGroupName("/test/logs")
                    .logStreamName(logName)
                    .startTime(start.toEpochMilli())
                    .endTime(end.toEpochMilli())
                    .build());

                var events = response.events();
                var receivedMessages = events.stream().map(x -> x.message()).collect(Collectors.toSet());
                assertThat(receivedMessages.containsAll(lines)).isTrue();
                return null;
            });
    }

}
